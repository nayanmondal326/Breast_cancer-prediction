# -*- coding: utf-8 -*-
"""Breast_cancer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b-kSLw1_NUEayuGUMSeY8cwdW_GEDTOt
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.datasets import load_breast_cancer

dataset=load_breast_cancer()



dataset.data

dataset.keys()

dataset.target

dataset.target_names

df=pd.DataFrame(np.c_[dataset['data'],dataset['target']],columns=np.append(dataset['feature_names'],['output']))
df

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_breast_cancer
breast_cancer = load_breast_cancer()
plt.figure(figsize=(10, 6))
sns.histplot(breast_cancer.data[:, 0], kde=True)
plt.xlabel(breast_cancer.feature_names[0])
plt.ylabel('Frequency')
plt.title('Histogram of Mean Radius')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x=breast_cancer.target, y=breast_cancer.data[:, 1])
plt.xlabel('Target')
plt.ylabel(breast_cancer.feature_names[1])
plt.title('Box Plot of Mean Texture by Target')
plt.show()

df.shape

df.info()

df.describe()

df.isnull().sum().sum()

import seaborn as sns
sns.heatmap(df)

x=df.drop('output',axis=1)
x

y=df['output']
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=51)

x_train.shape

x_test.shape

from sklearn.preprocessing import StandardScaler,Normalizer
nr=Normalizer()
model_nr=nr.fit(x_train)
x_train_nr=model_nr.transform(x_train)
x_test_nr=model_nr.transform(x_test)
sc=StandardScaler()
model_sc=sc.fit(x_train)
x_train_sc=model_sc.transform(x_train)
x_test_sc=model_sc.transform(x_test)

from sklearn.svm import SVC
svc=SVC(kernel='rbf')
svc_rbf=svc.fit(x_train,y_train)

svc_rbf

svc_rbf.score(x_test,y_test)

svc_rbf.score(x_train,y_train)

svc_rbf_sc=svc.fit(x_train_sc,y_train)

svc_rbf_sc.score(x_test_sc,y_test)

svc_rbf_nr=svc.fit(x_train_nr,y_train)

svc_rbf_nr.score(x_test_nr,y_test)

patient1=df.iloc[2]
patient1

patient2=x.iloc[2]
patient2

p_sc=nr.transform(np.array([patient2]))
p_sc

svc_rbf_nr.predict(p_sc)

from sklearn.tree import DecisionTreeClassifier
dtc=DecisionTreeClassifier(criterion='entropy',random_state=51)

dtc_sc=dtc.fit(x_train_sc,y_train)
dtc_sc

dtc_sc.score(x_test_sc,y_test)

dtc_nr=dtc.fit(x_train_nr,y_train)
dtc_nr

dtc_nr.score(x_test_nr,y_test)

p_nr=nr.transform(np.array([patient2]))
p_nr

dtc_nr.predict(p_sc)

